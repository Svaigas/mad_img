/**
 * @module upload
 * @description Implementation of upload API that provides a mechanism
 * to import and resize image object 
 */
'use strict'
var Joi = require('joi');
var Path = require('path');
var Promise = require('bluebird');
var sharp = require('sharp');
var shortid = require('shortid');
var AWS = require('aws-sdk');
var Boom = require('boom');
var mongodb = require('mongodb');

exports.routes = [{
	method: 'POST',
	path: '/uploadImages/metadata',
	config: {
		handler: metadataHandler,
		description: 'Upload image handler',
		tags: ['api'],
		payload: {
			maxBytes: 1048576,
			output: 'data',
			parse: true
		},
		validate: {
			payload: Joi.object().keys({
				filedata: Joi.binary().encoding('base64'),
				sizeList: Joi.array().items(
					Joi.object().keys({
						width: Joi.number().positive().required().description('width'),
						height: Joi.number().positive().required().description('height'),
					})).description('List of sizes')
			})
		}
	}
}]

/**
 * @description Handler for the upload metadata file to amazon and mongoDB
 */
function metadataHandler(request, reply) {
	var id = shortid.generate();
	// 1. get buffer from request and resize it  
	// 2. upload list of images to Amazon S3
	// 3. upload to mongo DB
	// 4. reply response to user
	
	return resizeImages(id, request.payload.filedata, request.payload.sizeList)
		.then(uploadDB)
		.then(reply)
		.catch((error) => {
			return reply(error)
		});

	/*
	 * @description Resize Image and runs UploadAWS function
	 * @params {Number} id - id generated by shortid plugin
	 * @params {Object} imagedata - metadata from payload
	 * @params {Object} imageSizeList - list of sizes, to resize image
	 * @returns A promise that resolves to the responseObject
	 */
	function resizeImages(id, imagedata, imageSizeList) {
		return new Promise.map(imageSizeList, function(size) {
			let width = size.width;
			let height = size.height;

			return sharp(imagedata)
				.resize(width, height)
				.toBuffer()
				.then(uploadAWS.bind(null, id, width, height))
				.catch(err => {
					reject(err);
				});
		});
	}

	/*
	 * @description UploadAWS function, which uploads to AWS S3
	 * @params {Number} id - id generated by shortid plugin
	 * @params {Number} width - width value of resizing
	 * @params {Number} height - height value of resizing
	 * @params {Object} buffer - buffer to resize
	 * @returns A promise that resolves to the responseObject
	 */
	function uploadAWS(id, width, height, buffer) {
		return new Promise(function(resolve, reject) {
			AWS.config.update({
				accessKeyId: process.env.AWS_ACCESS_KEY_ID,
				secretAccessKey: process.env.AWS_SECRET_ACCESS_TOKEN,
				signatureVersion: 'v4'
			});

			let params = {
				Bucket: process.env.MAD_IMG_BUCKET,
				Key: id + '_' + width + '_' + height + '.jpg',
				Body: buffer
			};

			let s3 = new AWS.S3();
			s3.putObject(params, function(err, inf) {
				if (err) {
					reject("Error uploading data: ", err);
				} else {

				}
			});
			let url = 'https://' + params.Bucket + '.' + s3.endpoint.host + '/' + params.Key;
			var responseObject = {
				"url": url,
				"width": width,
				"height": height
			};
			resolve(responseObject);
		});
	}

	/*
	 * @description uploadDB function, which uploads to mongoDB
	 * @params {Object} respArray - Response Array from upload AWS function 
	 * @returns A promise that resolves to the respArray Object
	 */
	function uploadDB(respArray) {
		return new Promise(function(resolve, reject) {
			var MongoClient = mongodb.MongoClient;
			var url = process.env.MAD_IMG_MONGO;

			MongoClient.connect(url, function(err, db) {
				if (err)
					reject('Unable to connect DataBase', err)
				else {
					var collection = db.collection('images');
					for (var obj in respArray) {
						collection.insert(respArray[obj], function(err, result) {
							if (err)
								reject('Unable to upload information to DB', err)
						})

					}
					resolve(respArray);
				}
			})
		})
	}
}